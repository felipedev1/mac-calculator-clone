{"version":3,"sources":["components/Button.jsx","main/Calculator.jsx","components/Display.jsx","serviceWorker.js","index.js"],"names":["props","className","operation","double","triple","onClick","e","click","label","initialState","displayValue","clearDisplay","values","current","Calculator","state","this","setState","equals","currentOperation","eval","n","includes","i","newValue","parseFloat","addDigit","setOperation","op","value","clearMemory","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b9069478.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Button.css'\r\n\r\nexport default props =>\r\n    <button className={`\r\n        button\r\n        ${props.operation ? 'operation' : ''}\r\n        ${props.double ? 'double' : ''}\r\n        ${props.triple ? 'triple': ''}\r\n    `}\r\n    onClick={\r\n        e => props.click && props.click(props.label)\r\n    }>\r\n        {props.label}\r\n    </button>","import React, {Component} from 'react'\r\nimport './Calculator.css'\r\n\r\nimport Button from '../components/Button'\r\nimport Display from '../components/Display'\r\n\r\nconst initialState = {\r\n    displayValue: '0',\r\n    clearDisplay: false,\r\n    operation: null,\r\n    values: [0, 0],\r\n    current: 0\r\n}\r\n\r\nexport default class Calculator extends Component {\r\n\r\n    state = {...initialState}\r\n\r\n    clearMemory(){\r\n        this.setState({...initialState})\r\n    }\r\n\r\n    setOperation(operation){\r\n        if(this.state.current === 0){\r\n            this.setState({operation, current: 1, clearDisplay: true})\r\n        } else{\r\n            const equals = operation === '='\r\n            const currentOperation = this.state.operation\r\n            const values = [...this.state.values]\r\n            try {\r\n                values[0] = eval(`${values[0]} ${currentOperation} ${values[1]}`)\r\n            } catch(e){\r\n                values[0] = this.state.values[0]\r\n            }\r\n            values[1] = 0\r\n            this.setState({\r\n                displayValue: values[0],\r\n                operation: equals ? null : operation,\r\n                current: equals ? 0 : 1,\r\n                clearDisplay: !equals,\r\n                values\r\n            })\r\n        }\r\n    }\r\n\r\n    addDigit(n){\r\n        if(n === '.' && this.state.displayValue.includes('.')){\r\n            return\r\n        }\r\n        const clearDisplay = this.state.displayValue === '0'\r\n            || this.state.clearDisplay\r\n        const currentValue = clearDisplay ? '': this.state.displayValue\r\n        const displayValue = currentValue + n\r\n        this.setState({displayValue, clearDisplay: false})\r\n\r\n        if(n!=='.'){\r\n            const i = this.state.current\r\n            const newValue = parseFloat(displayValue)\r\n            const values = [...this.state.values]\r\n            values[i] = newValue\r\n            this.setState({values})\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const addDigit = n => this.addDigit(n)\r\n        const setOperation = op => this.setOperation(op)\r\n        return(\r\n            <div className=\"calculator\">\r\n                <Display value={this.state.displayValue}/>\r\n                <Button label=\"AC\" click={()=>this.clearMemory()} triple/>\r\n                <Button label=\"/\" click={setOperation} operation/>\r\n                <Button label=\"7\" click={addDigit}/>\r\n                <Button label=\"8\" click={addDigit}/>\r\n                <Button label=\"9\" click={addDigit}/>\r\n                <Button label=\"*\" click={setOperation} operation/>\r\n                <Button label=\"4\" click={addDigit}/>\r\n                <Button label=\"5\" click={addDigit}/>\r\n                <Button label=\"6\" click={addDigit}/>\r\n                <Button label=\"-\" click={setOperation} operation/>\r\n                <Button label=\"1\" click={addDigit}/>\r\n                <Button label=\"2\" click={addDigit}/>\r\n                <Button label=\"3\" click={addDigit}/>\r\n                <Button label=\"+\" click={setOperation} operation/>\r\n                <Button label=\"0\" click={addDigit} double/>\r\n                <Button label=\".\" click={addDigit}/>\r\n                <Button label=\"=\" click={setOperation} operation/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport './Display.css'\r\n\r\nexport default props =>\r\n    <div className=\"display\">{props.value}</div>","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './main/Calculator';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <div>\n        <h1>Calculadora</h1>\n        <Calculator />\n    </div>\n    , document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}